#!/bin/bash
# Path for build related folders.
BUILD="./app/build";
OUTPUT="${BUILD}/outputs/apk/";

UNSIGNED_APK="app-release-unsigned.apk";
UNALIGNED_APK="app-release-unaligned.apk";
RELEASE_APK="app-release.apk";

# Name of the signing host.
HOST="android-deployment";

# Clean the build related files, these will be generated
# again when the release is assembled.
[ -d $BUILD ] && rm -fr $BUILD;
[ -f $REALEASE_APK ] && rm -f $RELEASE_APK;
[ -f $UNALIGNED_APK ] && rm -f $UNALIGNED_APK;

# Assemble the release.
./gradlew assembleRelease

# Before we start deploying the APK for signing we have to do
# some initial clean up. Removing the unsigned and unaligned
# files from the deployment host, if they still exists.
$(ssh $HOST rm -f $UNSIGNED_APK &>/dev/null);
$(ssh $HOST rm -f $UNALIGNED_APK &>/dev/null);

# Send the unsigned release APK to the signing host.
scp "${OUTPUT}/${UNSIGNED_APK}" "${HOST}:${UNSIGNED_APK}";

# Open a new connection to the signing host, we need to enter
# the password for the keystore. And, since we don't want the
# to store the password in plain text anywhere it's better to
# open a new connection and manually enter the password.
ssh $HOST;

# Verify that the unaligned apk actually exists on the signing
# host before we attempt to retrieve it.
if $(ssh -q $HOST [[ ! -f $UNALIGNED_APK ]]); then
    echo "Unable to locate ${UNALIGNED_APK} on signing host";
    exit 1;
fi;

# Retrieve the unaligned apk from the signing host and
# initialize the alignment.
scp "${HOST}:${UNALIGNED_APK}" $UNALIGNED_APK;
zipalign -v 4 $UNALIGNED_APK $RELEASE_APK;

# Do some clean up and exit.
[ -f $UNALIGNED_APK ] && rm -f $UNALIGNED_APK;
exit 0;
